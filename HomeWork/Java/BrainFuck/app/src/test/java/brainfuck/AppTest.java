/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package brainfuck;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.TestInstance.Lifecycle;

import brainfuck.data.CommandContext;
import brainfuck.logic.OperationFactory;
import brainfuck.operation.Operation;
import brainfuck.data.RegisterTape;
import brainfuck.data.StackWhile;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@TestInstance(Lifecycle.PER_CLASS)
public class AppTest {
    private static final Logger logger = LogManager.getLogger(AppTest.class);
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayInputStream inContent = new ByteArrayInputStream("10".getBytes());
    private final PrintStream originalOut = System.out;
    private final InputStream originalIn = System.in;

    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setIn(inContent);
    }
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setIn(originalIn);
    }

    CommandContext cc;
    @BeforeAll
    public void init() throws IOException{
        try {
            cc = new CommandContext("src/test/resources/forTest.txt");
        }
        catch(FileNotFoundException ex) {
            throw new RuntimeException("File cannot be opened!");
        }
        System.setProperty("log4j.configurationFile", "log4j2.xml");
    }

    @Test 
    public void TestOperationPlus() {
        RegisterTape.GetInstance().resetTape();

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);
        
        Operation a = OperationFactory.GetInstance().create("+");
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 1);

        a.run(cc);
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 3);

        logger.info("TestOperationPlus PASSED");
    }

    @Test 
    public void TestOperationMinus() {
        RegisterTape.GetInstance().resetTape();

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        Operation a = OperationFactory.GetInstance().create("-");
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), -1);

        a.run(cc);
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), -3);

        logger.info("TestOperationMinus PASSED");
    }

    @Test 
    public void TestOperationNext() {
        RegisterTape.GetInstance().resetTape();

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        Operation a = OperationFactory.GetInstance().create(">");
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 1);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        a.run(cc);
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 3);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        logger.info("TestOperationNext PASSED");
    }

    @Test 
    public void TestOperationBack() {
        RegisterTape.GetInstance().resetTape();

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        Operation a = OperationFactory.GetInstance().create(">");
        a.run(cc);
        a.run(cc);
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 3);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        a = OperationFactory.GetInstance().create("<");
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 2);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        a.run(cc);
        a.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        logger.info("TestOperationBack PASSED");
    }
    
    @Test 
    public void TestLoop() {
        RegisterTape.GetInstance().resetTape();
        StackWhile.GetInstance().resetStack();

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        Assertions.assertEquals(cc.pointer, 0);
        Operation a = OperationFactory.GetInstance().create("[");
        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> { a.run(cc); } );

        try {
            cc.ChangeFile("src/test/resources/loopTest.txt");
        }
        catch(FileNotFoundException ex) {
            return;
        }
        
        cc.pointer = 0;
        a.run(cc);
        Assertions.assertEquals(cc.pointer, 3);

        cc.pointer = 0;
        RegisterTape.GetInstance().setCellIndex(0);
        RegisterTape.GetInstance().setCellValue(1);
        a.run(cc);
        Assertions.assertEquals(cc.pointer, 1);
        Assertions.assertEquals(StackWhile.GetInstance().top().from, 0);
        Assertions.assertEquals(StackWhile.GetInstance().top().from, 0);

        cc.pointer = 2;
        RegisterTape.GetInstance().setCellIndex(2);
        RegisterTape.GetInstance().setCellValue(0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 2);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);
        Operation b = OperationFactory.GetInstance().create("]");
        b.run(cc);
        Assertions.assertEquals(cc.pointer, 3);

        cc.pointer = 0;
        RegisterTape.GetInstance().setCellIndex(0);
        a.run(cc);
        cc.pointer = 2;
        RegisterTape.GetInstance().setCellIndex(2);
        RegisterTape.GetInstance().setCellValue(1);
        b.run(cc);
        Assertions.assertEquals(cc.pointer, 0);
        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> { b.run(cc); });

        logger.info("TestLoop PASSED");
    }

    @Test
    public void TestInputAndOutput() {
        setUpStreams();
        RegisterTape.GetInstance().resetTape();

        Assertions.assertEquals(RegisterTape.GetInstance().getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 0);

        Operation op1 = OperationFactory.GetInstance().create(",");
        op1.run(cc);

        Assertions.assertEquals(RegisterTape.GetInstance().getCellValue(), 10);

        Operation op2 = OperationFactory.GetInstance().create(".");
        op2.run(cc);
        Assertions.assertEquals(outContent.toByteArray()[0], 49); //49 == '1'
        Assertions.assertEquals(outContent.toByteArray()[1], 48); //49 == '0'
        op2.run(cc);
        Assertions.assertEquals(outContent.toByteArray()[3], 49);
        Assertions.assertEquals(outContent.toByteArray()[4], 48);

        restoreStreams();

        logger.info("TestInputAndOutput PASSED");
    }
}