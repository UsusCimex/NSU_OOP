/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package brainfuck;

import org.junit.jupiter.api.Test;

import brainfuck.data.ExecutablePointer;
import brainfuck.data.RegisterTape;
import brainfuck.data.StackWhile;
import brainfuck.logic.OperationFactory;
import brainfuck.operation.Operation;
import brainfuck.data.Loop;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PrintStream;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.jupiter.api.Assertions;

// import org.junit.jupiter.api.Assertions;

public class AppTest {
    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayInputStream inContent = new ByteArrayInputStream("10".getBytes());
    private final PrintStream originalOut = System.out;
    private final InputStream originalIn = System.in;

    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setIn(inContent);
    }
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setIn(originalIn);
    }

    static private final Logger LOGGER = LogManager.getLogger(AppTest.class.getName());
    private final String LOGGER_TEST = "TEST";

    @Test 
    void TestOperationPlus() {
        RegisterTape.resetTape();

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        ExecutablePointer pointer = new ExecutablePointer();
        Integer op = "+".hashCode();
        Operation a = OperationFactory.create(op);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 1);

        a.run(pointer);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 3);

        LOGGER.info(a.getClass().getSimpleName() + LOGGER_TEST);
    }

    @Test 
    void TestOperationMinus() {
        RegisterTape.resetTape();

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        ExecutablePointer pointer = new ExecutablePointer();
        Integer op = "-".hashCode();
        Operation a = OperationFactory.create(op);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), -1);

        a.run(pointer);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), -3);

        LOGGER.info(a.getClass().getSimpleName() + LOGGER_TEST);
    }

    @Test 
    void TestOperationNext() {
        RegisterTape.resetTape();

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        ExecutablePointer pointer = new ExecutablePointer();
        Integer op = ">".hashCode();
        Operation a = OperationFactory.create(op);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 1);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        a.run(pointer);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 3);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        LOGGER.info(a.getClass().getSimpleName() + LOGGER_TEST);
    }

    @Test 
    void TestOperationBack() {
        RegisterTape.resetTape();

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        ExecutablePointer pointer = new ExecutablePointer();
        Integer op = ">".hashCode();
        Operation a = OperationFactory.create(op);
        a.run(pointer);
        a.run(pointer);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 3);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        op = "<".hashCode();
        a = OperationFactory.create(op);

        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 2);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        a.run(pointer);
        a.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        LOGGER.info(a.getClass().getSimpleName() + LOGGER_TEST);
    }
    
    @Test 
    void TestLoop() {
        RegisterTape.resetTape();
        StackWhile.resetStack();

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        ExecutablePointer pointer = new ExecutablePointer();
        Assertions.assertEquals(pointer.p, 0);
        Integer beg = "[".hashCode();
        Operation a = OperationFactory.create(beg);
        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> { a.run(pointer); } );
        
        StackWhile.push(0, 2);
        Loop lp = StackWhile.top();
        Assertions.assertEquals(lp.from, 0);
        Assertions.assertEquals(lp.to, 2);

        a.run(pointer);
        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> { a.run(pointer); } );
        Assertions.assertEquals(pointer.p, 3);
        
        pointer.p = 0;
        StackWhile.push(0, 2);

        RegisterTape.setCellValue(1);

        a.run(pointer);
        Assertions.assertEquals(pointer.p, 1);
        pointer.p = 2;

        Assertions.assertEquals(StackWhile.top().from, 0);
        Assertions.assertEquals(StackWhile.top().to, 2);

        Integer end = "]".hashCode();
        Operation b = OperationFactory.create(end);
        b.run(pointer);

        StackWhile.push(0, 2);
        Assertions.assertEquals(pointer.p, 0);
        RegisterTape.setCellValue(0);
        a.run(pointer);

        Assertions.assertEquals(pointer.p, 3);

        LOGGER.info(a.getClass().getSimpleName() + LOGGER_TEST);
        LOGGER.info(b.getClass().getSimpleName() + LOGGER_TEST);
    }

    @Test
    void TestInputAndOutput() {
        setUpStreams();
        RegisterTape.resetTape();

        Assertions.assertEquals(RegisterTape.getCellIndex(), 0);
        Assertions.assertEquals(RegisterTape.getCellValue(), 0);

        ExecutablePointer pointer = new ExecutablePointer();
        Integer in = ",".hashCode();
        Operation op1 = OperationFactory.create(in);
        op1.run(pointer);

        Assertions.assertEquals(RegisterTape.getCellValue(), 10);

        Integer out = ".".hashCode();
        Operation op2 = OperationFactory.create(out);
        op2.run(pointer);
        Assertions.assertEquals(outContent.toByteArray()[0], 49); //49 == '1'
        Assertions.assertEquals(outContent.toByteArray()[1], 48); //49 == '0'
        op2.run(pointer);
        Assertions.assertEquals(outContent.toByteArray()[3], 49);
        Assertions.assertEquals(outContent.toByteArray()[4], 48);

        restoreStreams();

        LOGGER.info(op1.getClass().getSimpleName() + LOGGER_TEST);
        LOGGER.info(op2.getClass().getSimpleName() + LOGGER_TEST);
    }
    
}